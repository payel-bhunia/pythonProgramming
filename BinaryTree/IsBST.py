# User function Template for python3
import sys
def check_BST(root, max_l, min_l):
    if root == None:
        return True
    else:
        if root.data >= max_l or root.data <= min_l:
            print(root.data)
            return False
        else:
            return check_BST(root.left, root.data, min_l) and check_BST(root.right, max_l, root.data)


class Solution:

    # Function to check whether a Binary Tree is BST or not.
    def isBST(self, root):
        # code here
        max_l = 1000000007
        min_l = -1000000007

        return check_BST(root, max_l, min_l)


# {
#  Driver Code Starts
# Initial Template for Python 3
from collections import deque


# Tree Node
class Node:
    def __init__(self, val):
        self.right = None
        self.data = val
        self.left = None


def buildTree(s):
    # Corner Case
    if (len(s) == 0 or s[0] == "-1"):
        return None

    # Creating list of strings from input
    # string after spliting by space
    ip = list(map(str, s.split()))

    # Create the root of the tree
    root = Node(int(ip[0]))
    size = 0
    q = deque()

    # Push the root to the queue
    q.append(root)
    size = size + 1

    # Starting from the second element
    i = 1
    while (size > 0 and i < len(ip)):
        # Get and remove the front of the queue
        currNode = q[0]
        q.popleft()
        size = size - 1

        # Get the current node's value from the string
        currVal = ip[i]

        # If the left child is not null
        if (currVal != "-1"):
            # Create the left child for the current node
            currNode.left = Node(int(currVal))

            # Push it to the queue
            q.append(currNode.left)
            size = size + 1
        # For the right child
        i = i + 1
        if (i >= len(ip)):
            break
        currVal = ip[i]

        # If the right child is not null
        if (currVal != "-1"):
            # Create the right child for the current node
            currNode.right = Node(int(currVal))

            # Push it to the queue
            q.append(currNode.right)
            size = size + 1
        i = i + 1
    return root



if __name__ == "__main__":
    t = 1
    for _ in range(0, t):
        s = '665 503 806 186 607 683 821 161 391 544 621 681 804 815 823 127 171 220 409 514 561 615 658 669 682 803 805 814 816 822 825 118 136 170 177 218 376 408 478 513 542 552 598 613 620 651 663 666 674 -1 -1 699 -1 -1 -1 810 -1 -1 817 -1 -1 824 826 87 122 133 151 169 -1 176 179 188 219 329 388 402 -1 449 501 509 -1 528 543 551 555 566 605 608 614 616 -1 646 654 660 664 -1 667 673 675 691 733 808 813 -1 819 -1 -1 -1 827 83 115 119 124 132 134 139 156 164 -1 174 -1 178 184 187 203 -1 -1 260 334 379 390 401 404 438 475 486 502 505 510 524 538 -1 -1 549 -1 554 560 562 585 599 606 -1 610 -1 -1 -1 617 623 649 652 656 659 662 -1 -1 -1 668 670 -1 -1 678 685 693 712 752 807 809 812 -1 818 820 -1 828 73 85 114 117 -1 120 123 125 129 -1 -1 135 137 140 153 159 163 166 173 175 -1 -1 181 185 -1 -1 191 206 255 264 332 370 378 386 389 -1 399 -1 403 405 420 443 473 476 483 495 -1 -1 504 508 -1 511 516 525 529 541 548 550 553 -1 558 -1 -1 563 582 593 -1 600 -1 -1 609 612 -1 618 622 627 647 650 -1 653 655 657 -1 -1 661 -1 -1 -1 -1 672 676 679 684 689 692 694 705 717 739 794 -1 -1 -1 -1 811 -1 -1 -1 -1 -1 -1 -1 72 78 84 86 112 -1 116 -1 -1 121 -1 -1 -1 126 128 130 -1 -1 -1 138 -1 145 152 154 158 160 162 -1 165 168 172 -1 -1 -1 180 183 -1 -1 189 202 205 215 224 259 261 307 330 333 365 372 377 -1 384 387 -1 -1 394 400 -1 -1 -1 407 419 431 441 447 458 474 -1 477 482 485 494 498 -1 -1 506 -1 -1 512 515 521 -1 526 -1 536 540 -1 545 -1 -1 -1 -1 -1 557 559 -1 564 581 584 590 594 -1 604 -1 -1 611 -1 -1 619 -1 -1 624 636 -1 648 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 671 -1 -1 677 -1 680 -1 -1 688 690 -1 -1 -1 697 701 708 716 726 736 747 760 800 -1 -1 69 -1 77 80 -1 -1 -1 -1 109 113 -1 -1 -1 -1 -1 -1 -1 -1 -1 131 -1 -1 142 146 -1 -1 -1 155 157 -1 -1 -1 -1 -1 -1 -1 167 -1 -1 -1 -1 -1 182 -1 -1 190 194 -1 204 -1 209 216 222 254 256 -1 -1 263 295 325 -1 331 -1 -1 358 366 371 374 -1 -1 380 385 -1 -1 393 398 -1 -1 406 -1 417 -1 428 434 439 442 446 448 451 461 -1 -1 -1 -1 480 -1 484 -1 490 -1 497 500 -1 507 -1 -1 -1 -1 517 522 -1 527 531 537 539 -1 -1 546 556 -1 -1 -1 -1 565 570 -1 -1 583 586 592 -1 597 601 -1 -1 -1 -1 -1 -1 626 632 643 -1 -1 -1 -1 -1 -1 -1 -1 686 -1 -1 -1 696 698 700 703 706 709 713 -1 723 729 735 737 745 749 753 768 796 801 68 70 74 -1 79 81 97 110 -1 -1 -1 -1 141 143 -1 149 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 193 199 -1 -1 208 214 -1 217 221 223 226 -1 -1 258 262 -1 292 299 319 326 -1 -1 349 362 -1 368 -1 -1 373 375 -1 381 -1 -1 392 -1 397 -1 -1 -1 411 418 422 430 433 437 -1 440 -1 -1 445 -1 -1 -1 450 454 460 463 479 481 -1 -1 489 492 496 -1 499 -1 -1 -1 -1 519 -1 523 -1 -1 530 535 -1 -1 -1 -1 -1 547 -1 -1 -1 -1 568 579 -1 -1 -1 589 591 -1 595 -1 -1 602 625 -1 630 634 637 644 -1 687 695 -1 -1 -1 -1 -1 702 704 -1 707 -1 711 -1 715 722 725 728 730 734 -1 -1 738 742 746 748 750 -1 758 764 788 795 797 -1 802 67 -1 -1 71 -1 75 -1 -1 -1 82 88 105 -1 111 -1 -1 -1 144 147 150 192 -1 197 200 207 -1 211 -1 -1 -1 -1 -1 -1 -1 225 241 257 -1 -1 -1 268 293 298 301 309 321 -1 327 342 350 360 364 367 369 -1 -1 -1 -1 -1 382 -1 -1 395 -1 410 413 -1 -1 421 424 429 -1 432 -1 435 -1 -1 -1 444 -1 -1 -1 452 457 459 -1 462 469 -1 -1 -1 -1 487 -1 491 493 -1 -1 -1 -1 518 520 -1 -1 -1 -1 533 -1 -1 -1 567 569 571 580 587 -1 -1 -1 -1 596 -1 603 -1 -1 629 631 633 635 -1 639 -1 645 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 710 -1 714 -1 720 -1 724 -1 727 -1 -1 731 -1 -1 -1 -1 740 744 -1 -1 -1 -1 -1 751 756 759 761 767 779 793 -1 -1 -1 798 -1 -1 -1 -1 -1 -1 -1 76 -1 -1 -1 93 101 106 -1 -1 -1 -1 -1 148 -1 -1 -1 -1 195 198 -1 201 -1 -1 210 212 -1 -1 240 243 -1 -1 265 290 -1 294 297 -1 300 306 308 316 320 324 -1 328 338 345 -1 355 359 361 363 -1 -1 -1 -1 -1 -1 383 -1 396 -1 -1 412 416 -1 -1 423 425 -1 -1 -1 -1 -1 436 -1 -1 -1 453 456 -1 -1 -1 -1 -1 467 471 -1 488 -1 -1 -1 -1 -1 -1 -1 -1 532 534 -1 -1 -1 -1 -1 577 -1 -1 -1 588 -1 -1 -1 -1 628 -1 -1 -1 -1 -1 -1 -1 638 642 -1 -1 -1 -1 -1 -1 718 721 -1 -1 -1 -1 -1 732 -1 741 743 -1 -1 -1 755 757 -1 -1 -1 763 765 -1 770 786 790 -1 -1 799 -1 -1 92 95 100 103 -1 108 -1 -1 -1 196 -1 -1 -1 -1 -1 -1 -1 213 232 -1 242 247 -1 267 284 291 -1 -1 296 -1 -1 -1 302 -1 -1 -1 312 317 -1 -1 323 -1 -1 -1 337 341 344 346 352 357 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 414 -1 -1 -1 -1 426 -1 -1 -1 -1 455 -1 466 468 470 472 -1 -1 -1 -1 -1 -1 576 578 -1 -1 -1 -1 -1 -1 640 -1 -1 719 -1 -1 -1 -1 -1 -1 -1 -1 754 -1 -1 -1 762 -1 -1 766 769 772 785 787 789 792 -1 -1 90 -1 94 96 99 -1 102 104 107 -1 -1 -1 -1 -1 230 236 -1 -1 244 249 266 -1 269 285 -1 -1 -1 -1 -1 305 311 314 -1 318 322 -1 335 -1 339 -1 343 -1 -1 347 351 354 356 -1 -1 415 -1 427 -1 -1 464 -1 -1 -1 -1 -1 -1 -1 574 -1 -1 -1 -1 641 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 771 773 780 -1 -1 -1 -1 -1 791 -1 89 91 -1 -1 -1 -1 98 -1 -1 -1 -1 -1 -1 -1 229 231 235 238 -1 245 248 250 -1 -1 -1 278 -1 286 304 -1 310 -1 313 315 -1 -1 -1 -1 -1 336 -1 340 -1 -1 -1 348 -1 -1 353 -1 -1 -1 -1 -1 -1 -1 -1 465 573 575 -1 -1 -1 -1 -1 776 -1 782 -1 -1 -1 -1 -1 -1 -1 -1 228 -1 -1 -1 233 -1 237 239 -1 246 -1 -1 -1 253 277 279 -1 289 303 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 572 -1 -1 -1 775 778 781 784 227 -1 -1 234 -1 -1 -1 -1 -1 -1 251 -1 272 -1 -1 280 288 -1 -1 -1 -1 -1 774 -1 777 -1 -1 -1 783 -1 -1 -1 -1 -1 -1 252 270 275 -1 282 287 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 271 274 276 281 283 -1 -1 -1 -1 273 -1 -1 -1 -1 -1 -1 -1 -1 -1'
        root = buildTree(s)
        if Solution().isBST(root):
            print(1)
        else:
            print(0)
# } Driver Code Ends